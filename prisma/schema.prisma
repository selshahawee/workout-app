// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Workout {
  id        Int           @id @default(autoincrement())
  name      String
  imgUrl    String
  exercises WorkoutLine[]
  gymDays   GymDay[]
}

model Exercise {
  id          Int   @id @default(autoincrement())
  name        String
  description String
  videoUrl    String
  workouts    WorkoutLine[]

}

model WorkoutLine {
  id        Int @id @default(autoincrement())
  sugWeight Int
  sugSets   Int
  sugReps   Int
  steps     Int

  exercise   Exercise @relation(fields: [exerciseId], references: [id])
  exerciseId Int

  workout   Workout @relation(fields: [workoutId], references: [id])
  workoutId Int

  userlogs UserLog[]

}

model UserLog {
  id            Int         @id @default(autoincrement())
  weight        Int
  reps          Int
  setNumber     Int
  date          DateTime    @default(now())
  user          User        @relation(fields: [userId], references: [id]) //many userlogs to one user
  userId        String
  workoutLine   WorkoutLine @relation(fields: [workoutLineId], references: [id])
  workoutLineId Int
  gymDay        GymDay      @relation(fields: [gymdayId], references: [id])
  gymdayId      String

}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model GymDay {
  id            String   @id @default(cuid())
  dateCreated   DateTime @default(now())
  activeWorkout Boolean
  workoutStart  DateTime @default(now())
  workoutFinish DateTime ? 

  workout   Workout @relation(fields: [workoutId], references: [id])
  workoutId Int

  user    User      @relation(fields: [userId], references: [id]) //many GymDays to one user
  userId  String
  UserLog UserLog[]
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
 


  gender        String?
  age           Int?
  weight        Int?
  height        Int?
  streakCount   Int?
  accounts      Account[]
  sessions      Session[]
  gymDays       GymDay[]
  userLogs      UserLog[] //one user with userlogs
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
