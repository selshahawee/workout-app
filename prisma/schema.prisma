generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Workout {
  id        Int           @id @default(autoincrement())
  name      String
  imgUrl    String
  description    String?
  gymDays   GymDay[]
  exercises WorkoutLine[]
}

model Exercise {
  id          Int           @id @default(autoincrement())
  videoUrl    String
  description String
  name        String
  workouts    WorkoutLine[]
}

model WorkoutLine {
  id         Int       @id @default(autoincrement())
  sugWeight  Int
  sugSets    Int
  sugReps    Int
  steps      Int
  exerciseId Int
  workoutId  Int
  exercise   Exercise  @relation(fields: [exerciseId], references: [id])
  workout    Workout   @relation(fields: [workoutId], references: [id])
  userlogs   UserLog[]
}

model UserLog {
  id            Int         @id @default(autoincrement())
  weight        Int
  reps          Int
  setNumber     Int?
  date          DateTime    @default(now())
  workoutLineId Int
  userId        String
  gymdayId      String
  gymDay        GymDay      @relation(fields: [gymdayId], references: [id])
  user          User        @relation(fields: [userId], references: [id])
  workoutLine   WorkoutLine @relation(fields: [workoutLineId], references: [id])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model GymDay {
  id            String    @id @default(cuid())
  dateCreated   DateTime  @default(now())
  activeWorkout Boolean
  workoutStart  DateTime  @default(now())
  workoutFinish DateTime?
  workoutId     Int
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  workout       Workout   @relation(fields: [workoutId], references: [id])
  UserLog       UserLog[]
}

model User {
  id            String    @id @default(cuid())
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  name          String?
  age           Int?
  gender        String?
  height        Int?
  streakCount   Int?
  weight        Int?
  activeGymDay String?
  activeWorkoutID        Int?
  accounts      Account[]
  gymDays       GymDay[]
  sessions      Session[]
  userLogs      UserLog[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
